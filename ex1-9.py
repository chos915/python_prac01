"""
* 행 선택
데이터 프레임의 행 데이터를 선택하기 위해서는 loc과 iloc 인덱서를 사용한다. 인덱스 이름을 기준으로 행을 선택할 때는 loc을 이용하고, 정수형 위치 인덱스를 사용할 때는 iloc을 이용한다.

앞에서 사용한 학생 3명의 과목별 점수가 저장된 데이터 프레임을 계속 활용한다. 데이터 프레임의 첫 번째 행에는 '서준' 학생의 과목별 점수 데이터가 입력되어 있다. '서준' 학생의 과목별 점수 데이터를 행으로 추출하면 시리즈 객체가 반환된다.

이 때 loc 인덱서를 이용하려면 '서준' 이라는 인덱스 이름을 직접 입력하고, iloc을 이용할 때는 첫 번째 정수형 위치를 나타내는 0을 입력한다. 각각 반환되는 값을 label1 변수와 position1 변수에 저장하여 출력해 보면 결과값에 차이가 없다.
"""

# -*- coding: utf-8 -*-

import pandas as pd

# DataFrame() 함수로 데이터프레임 변환. 변수 df에 저장
exam_data = {'수학' : [90, 80, 70], '영어' : [98, 89, 95],
             '음악' : [85, 95, 100], '체육' : [100, 90, 90]}

df = pd.DataFrame(exam_data, index=['서준', '우현', '인아'])
print(df)
print('\n')

# 행 인덱스를 사용하여 행 1개 선택
label1 = df.loc['서준']
position1 = df.iloc[0]
print(label1)
print('\n')
print(position1)
"""
2개 이상의 행 인덱스를 리스트 형태로 입력하면 매칭되는 모든 행 데이터를 동시에 추출한다. 예제에서 데이터 프레임의 1, 2번째 행에 있는 '서준', '우현' 학생을 인덱싱으로 선택해 본다. loc 인덱서는 ['서준', '우현']과 같이 인덱스 이름을 배열로 전달하고, iloc을 이용할 때는 [0, 1]과 같이 정수형 위치를 전달한다. 이때 label2 변수와 position2 변수에 저장된 내용이 같다.
"""
# 행 인덱스를 사용하여 2개 이상의 행 선택
label2 = df.loc[['서준', '우현']]
position2 = df.iloc[[0, 1]]
print(label2)
print('\n')
print(position2)

"""
마지막으로 행 인덱스의 범위를 지정하여 여러개의 행을 동시에 선택하는 슬라이싱 기법을 살펴보자. 이번에는 label3와 position3의 결과값에 차이가 있음에 유의한다. 인덱스 이름을 범위로 지정한 label3의 경우에는 범위의 마지막 값이 '우현' 학생의 점수가 포함되지만, 정수현 위치 인덱스를 사용한 position3에는 범위의 마지막 값인 '우현' 학생 점수가 제외된다.
"""
# 행 인덱스의 범위를 지정하여 행 선택
label3 = df.loc['서준' : '우현']
position3 = df.iloc[0:1]
print(label3)
print('\n')
print(position3)